/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _FUSE_RPC_H_RPCGEN
#define _FUSE_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX_SIZE 4096

struct getattr_arg {
	char *path;
};
typedef struct getattr_arg getattr_arg;

struct getattr_ret {
	int st_dev;
	int st_ino;
	int st_mode;
	int st_nlink;
	int st_uid;
	int st_gid;
	int st_rdev;
	u_long st_size;
	u_long st_blksize;
	u_long st_blocks;
	long st_atimensec;
	long st_mtimensec;
	long st_ctimensec;
	int ret;
};
typedef struct getattr_ret getattr_ret;

struct access_arg {
	char *path;
	int mask;
};
typedef struct access_arg access_arg;

struct access_ret {
	int ret;
};
typedef struct access_ret access_ret;

struct readdir_arg {
	char *path;
};
typedef struct readdir_arg readdir_arg;

struct readdir_ret {
	int count;
	char entries[MAX_SIZE];
	int ret;
};
typedef struct readdir_ret readdir_ret;

struct opendir_arg {
	char *path;
};
typedef struct opendir_arg opendir_arg;

struct opendir_ret {
	int fd;
	int ret;
};
typedef struct opendir_ret opendir_ret;

struct releasedir_arg {
	int fd;
};
typedef struct releasedir_arg releasedir_arg;

struct releasedir_ret {
	int ret;
};
typedef struct releasedir_ret releasedir_ret;

struct open_arg {
	char *path;
	int flags;
};
typedef struct open_arg open_arg;

struct open_ret {
	int fd;
	int ret;
};
typedef struct open_ret open_ret;

struct release_arg {
	int fd;
};
typedef struct release_arg release_arg;

struct release_ret {
	int ret;
};
typedef struct release_ret release_ret;

struct read_arg {
	int fd;
	u_int size;
	u_int offset;
};
typedef struct read_arg read_arg;

struct read_ret {
	char buffer[MAX_SIZE];
	int len;
	int ret;
};
typedef struct read_ret read_ret;

struct write_arg {
	int fd;
	u_int size;
	u_int offset;
	char buffer[MAX_SIZE];
};
typedef struct write_arg write_arg;

struct write_ret {
	int len;
	int ret;
};
typedef struct write_ret write_ret;

#define COMPUTE 456123789
#define COMPUTE_VERS 6

#if defined(__STDC__) || defined(__cplusplus)
#define BB_GETATTR 1
extern  getattr_ret * bb_getattr_6(getattr_arg *, CLIENT *);
extern  getattr_ret * bb_getattr_6_svc(getattr_arg *, struct svc_req *);
#define BB_ACCESS 2
extern  access_ret * bb_access_6(access_arg *, CLIENT *);
extern  access_ret * bb_access_6_svc(access_arg *, struct svc_req *);
#define BB_READDIR 3
extern  readdir_ret * bb_readdir_6(readdir_arg *, CLIENT *);
extern  readdir_ret * bb_readdir_6_svc(readdir_arg *, struct svc_req *);
#define BB_OPENDIR 4
extern  opendir_ret * bb_opendir_6(opendir_arg *, CLIENT *);
extern  opendir_ret * bb_opendir_6_svc(opendir_arg *, struct svc_req *);
#define BB_RELEASEDIR 5
extern  releasedir_ret * bb_releasedir_6(releasedir_arg *, CLIENT *);
extern  releasedir_ret * bb_releasedir_6_svc(releasedir_arg *, struct svc_req *);
#define BB_OPEN 6
extern  open_ret * bb_open_6(open_arg *, CLIENT *);
extern  open_ret * bb_open_6_svc(open_arg *, struct svc_req *);
#define BB_RELEASE 7
extern  release_ret * bb_release_6(release_arg *, CLIENT *);
extern  release_ret * bb_release_6_svc(release_arg *, struct svc_req *);
#define BB_READ 8
extern  read_ret * bb_read_6(read_arg *, CLIENT *);
extern  read_ret * bb_read_6_svc(read_arg *, struct svc_req *);
#define BB_WRITE 9
extern  write_ret * bb_write_6(write_arg *, CLIENT *);
extern  write_ret * bb_write_6_svc(write_arg *, struct svc_req *);
extern int compute_6_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define BB_GETATTR 1
extern  getattr_ret * bb_getattr_6();
extern  getattr_ret * bb_getattr_6_svc();
#define BB_ACCESS 2
extern  access_ret * bb_access_6();
extern  access_ret * bb_access_6_svc();
#define BB_READDIR 3
extern  readdir_ret * bb_readdir_6();
extern  readdir_ret * bb_readdir_6_svc();
#define BB_OPENDIR 4
extern  opendir_ret * bb_opendir_6();
extern  opendir_ret * bb_opendir_6_svc();
#define BB_RELEASEDIR 5
extern  releasedir_ret * bb_releasedir_6();
extern  releasedir_ret * bb_releasedir_6_svc();
#define BB_OPEN 6
extern  open_ret * bb_open_6();
extern  open_ret * bb_open_6_svc();
#define BB_RELEASE 7
extern  release_ret * bb_release_6();
extern  release_ret * bb_release_6_svc();
#define BB_READ 8
extern  read_ret * bb_read_6();
extern  read_ret * bb_read_6_svc();
#define BB_WRITE 9
extern  write_ret * bb_write_6();
extern  write_ret * bb_write_6_svc();
extern int compute_6_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_getattr_arg (XDR *, getattr_arg*);
extern  bool_t xdr_getattr_ret (XDR *, getattr_ret*);
extern  bool_t xdr_access_arg (XDR *, access_arg*);
extern  bool_t xdr_access_ret (XDR *, access_ret*);
extern  bool_t xdr_readdir_arg (XDR *, readdir_arg*);
extern  bool_t xdr_readdir_ret (XDR *, readdir_ret*);
extern  bool_t xdr_opendir_arg (XDR *, opendir_arg*);
extern  bool_t xdr_opendir_ret (XDR *, opendir_ret*);
extern  bool_t xdr_releasedir_arg (XDR *, releasedir_arg*);
extern  bool_t xdr_releasedir_ret (XDR *, releasedir_ret*);
extern  bool_t xdr_open_arg (XDR *, open_arg*);
extern  bool_t xdr_open_ret (XDR *, open_ret*);
extern  bool_t xdr_release_arg (XDR *, release_arg*);
extern  bool_t xdr_release_ret (XDR *, release_ret*);
extern  bool_t xdr_read_arg (XDR *, read_arg*);
extern  bool_t xdr_read_ret (XDR *, read_ret*);
extern  bool_t xdr_write_arg (XDR *, write_arg*);
extern  bool_t xdr_write_ret (XDR *, write_ret*);

#else /* K&R C */
extern bool_t xdr_getattr_arg ();
extern bool_t xdr_getattr_ret ();
extern bool_t xdr_access_arg ();
extern bool_t xdr_access_ret ();
extern bool_t xdr_readdir_arg ();
extern bool_t xdr_readdir_ret ();
extern bool_t xdr_opendir_arg ();
extern bool_t xdr_opendir_ret ();
extern bool_t xdr_releasedir_arg ();
extern bool_t xdr_releasedir_ret ();
extern bool_t xdr_open_arg ();
extern bool_t xdr_open_ret ();
extern bool_t xdr_release_arg ();
extern bool_t xdr_release_ret ();
extern bool_t xdr_read_arg ();
extern bool_t xdr_read_ret ();
extern bool_t xdr_write_arg ();
extern bool_t xdr_write_ret ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_FUSE_RPC_H_RPCGEN */
