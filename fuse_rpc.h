/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _FUSE_RPC_H_RPCGEN
#define _FUSE_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX_SIZE 4096

struct getattr_arg {
	char *path;
};
typedef struct getattr_arg getattr_arg;

struct getattr_ret {
	int st_dev;
	int st_ino;
	int st_mode;
	int st_nlink;
	int st_uid;
	int st_gid;
	int st_rdev;
	u_long st_size;
	u_long st_blksize;
	u_long st_blocks;
	long st_atimensec;
	long st_mtimensec;
	long st_ctimensec;
	int ret;
};
typedef struct getattr_ret getattr_ret;

struct access_arg {
	char *path;
	int mask;
};
typedef struct access_arg access_arg;

struct access_ret {
	int ret;
};
typedef struct access_ret access_ret;

struct mkdir_arg {
	char *path;
	int mode;
};
typedef struct mkdir_arg mkdir_arg;

struct mkdir_ret {
	int ret;
};
typedef struct mkdir_ret mkdir_ret;

struct rmdir_arg {
	char *path;
};
typedef struct rmdir_arg rmdir_arg;

struct rmdir_ret {
	int ret;
};
typedef struct rmdir_ret rmdir_ret;

struct readdir_arg {
	char *path;
};
typedef struct readdir_arg readdir_arg;

struct readdir_ret {
	int count;
	char entries[MAX_SIZE];
	int ret;
};
typedef struct readdir_ret readdir_ret;

struct opendir_arg {
	char *path;
};
typedef struct opendir_arg opendir_arg;

struct opendir_ret {
	int fd;
	int ret;
};
typedef struct opendir_ret opendir_ret;

struct releasedir_arg {
	int fd;
};
typedef struct releasedir_arg releasedir_arg;

struct releasedir_ret {
	int ret;
};
typedef struct releasedir_ret releasedir_ret;

struct rename_arg {
	char *path;
	char *newpath;
};
typedef struct rename_arg rename_arg;

struct rename_ret {
	int ret;
};
typedef struct rename_ret rename_ret;

struct symlink_arg {
	char *path;
	char *link;
};
typedef struct symlink_arg symlink_arg;

struct symlink_ret {
	int ret;
};
typedef struct symlink_ret symlink_ret;

struct readlink_arg {
	char *path;
	u_int size;
};
typedef struct readlink_arg readlink_arg;

struct readlink_ret {
	char buffer[MAX_SIZE];
	int len;
	int ret;
};
typedef struct readlink_ret readlink_ret;

struct mknod_arg {
	char *path;
	int mode;
	int dev;
};
typedef struct mknod_arg mknod_arg;

struct mknod_ret {
	int ret;
};
typedef struct mknod_ret mknod_ret;

struct utime_arg {
	char *path;
	long actime;
	long modtime;
};
typedef struct utime_arg utime_arg;

struct utime_ret {
	int ret;
};
typedef struct utime_ret utime_ret;

struct truncate_arg {
	char *path;
	int newsize;
};
typedef struct truncate_arg truncate_arg;

struct truncate_ret {
	int ret;
};
typedef struct truncate_ret truncate_ret;

struct chmod_arg {
	char *path;
	int mode;
};
typedef struct chmod_arg chmod_arg;

struct chmod_ret {
	int ret;
};
typedef struct chmod_ret chmod_ret;

struct chown_arg {
	char *path;
	u_int uid;
	u_int gid;
};
typedef struct chown_arg chown_arg;

struct chown_ret {
	int ret;
};
typedef struct chown_ret chown_ret;

struct unlink_arg {
	char *path;
};
typedef struct unlink_arg unlink_arg;

struct unlink_ret {
	int ret;
};
typedef struct unlink_ret unlink_ret;

struct open_arg {
	char *path;
	int flags;
};
typedef struct open_arg open_arg;

struct open_ret {
	int fd;
	int ret;
};
typedef struct open_ret open_ret;

struct release_arg {
	int fd;
};
typedef struct release_arg release_arg;

struct release_ret {
	int ret;
};
typedef struct release_ret release_ret;

struct read_arg {
	int fd;
	u_int size;
	u_int offset;
};
typedef struct read_arg read_arg;

struct read_ret {
	char buffer[MAX_SIZE];
	int len;
	int ret;
};
typedef struct read_ret read_ret;

struct write_arg {
	int fd;
	u_int size;
	u_int offset;
	char buffer[MAX_SIZE];
};
typedef struct write_arg write_arg;

struct write_ret {
	int len;
	int ret;
};
typedef struct write_ret write_ret;

#define COMPUTE 456123789
#define COMPUTE_VERS 6

#if defined(__STDC__) || defined(__cplusplus)
#define BB_GETATTR 1
extern  getattr_ret * bb_getattr_6(getattr_arg *, CLIENT *);
extern  getattr_ret * bb_getattr_6_svc(getattr_arg *, struct svc_req *);
#define BB_ACCESS 2
extern  access_ret * bb_access_6(access_arg *, CLIENT *);
extern  access_ret * bb_access_6_svc(access_arg *, struct svc_req *);
#define BB_MKDIR 3
extern  mkdir_ret * bb_mkdir_6(mkdir_arg *, CLIENT *);
extern  mkdir_ret * bb_mkdir_6_svc(mkdir_arg *, struct svc_req *);
#define BB_RMDIR 4
extern  rmdir_ret * bb_rmdir_6(rmdir_arg *, CLIENT *);
extern  rmdir_ret * bb_rmdir_6_svc(rmdir_arg *, struct svc_req *);
#define BB_READDIR 5
extern  readdir_ret * bb_readdir_6(readdir_arg *, CLIENT *);
extern  readdir_ret * bb_readdir_6_svc(readdir_arg *, struct svc_req *);
#define BB_OPENDIR 6
extern  opendir_ret * bb_opendir_6(opendir_arg *, CLIENT *);
extern  opendir_ret * bb_opendir_6_svc(opendir_arg *, struct svc_req *);
#define BB_RELEASEDIR 7
extern  releasedir_ret * bb_releasedir_6(releasedir_arg *, CLIENT *);
extern  releasedir_ret * bb_releasedir_6_svc(releasedir_arg *, struct svc_req *);
#define BB_RENAME 8
extern  rename_ret * bb_rename_6(rename_arg *, CLIENT *);
extern  rename_ret * bb_rename_6_svc(rename_arg *, struct svc_req *);
#define BB_SYMLINK 9
extern  symlink_ret * bb_symlink_6(symlink_arg *, CLIENT *);
extern  symlink_ret * bb_symlink_6_svc(symlink_arg *, struct svc_req *);
#define BB_READLINK 10
extern  readlink_ret * bb_readlink_6(readlink_arg *, CLIENT *);
extern  readlink_ret * bb_readlink_6_svc(readlink_arg *, struct svc_req *);
#define BB_MKNOD 11
extern  mknod_ret * bb_mknod_6(mknod_arg *, CLIENT *);
extern  mknod_ret * bb_mknod_6_svc(mknod_arg *, struct svc_req *);
#define BB_TRUNCATE 12
extern  truncate_ret * bb_truncate_6(truncate_arg *, CLIENT *);
extern  truncate_ret * bb_truncate_6_svc(truncate_arg *, struct svc_req *);
#define BB_UNLINK 13
extern  unlink_ret * bb_unlink_6(unlink_arg *, CLIENT *);
extern  unlink_ret * bb_unlink_6_svc(unlink_arg *, struct svc_req *);
#define BB_UTIME 14
extern  utime_ret * bb_utime_6(utime_arg *, CLIENT *);
extern  utime_ret * bb_utime_6_svc(utime_arg *, struct svc_req *);
#define BB_CHMOD 15
extern  chmod_ret * bb_chmod_6(chmod_arg *, CLIENT *);
extern  chmod_ret * bb_chmod_6_svc(chmod_arg *, struct svc_req *);
#define BB_CHOWN 16
extern  chown_ret * bb_chown_6(chown_arg *, CLIENT *);
extern  chown_ret * bb_chown_6_svc(chown_arg *, struct svc_req *);
#define BB_OPEN 17
extern  open_ret * bb_open_6(open_arg *, CLIENT *);
extern  open_ret * bb_open_6_svc(open_arg *, struct svc_req *);
#define BB_RELEASE 18
extern  release_ret * bb_release_6(release_arg *, CLIENT *);
extern  release_ret * bb_release_6_svc(release_arg *, struct svc_req *);
#define BB_READ 19
extern  read_ret * bb_read_6(read_arg *, CLIENT *);
extern  read_ret * bb_read_6_svc(read_arg *, struct svc_req *);
#define BB_WRITE 20
extern  write_ret * bb_write_6(write_arg *, CLIENT *);
extern  write_ret * bb_write_6_svc(write_arg *, struct svc_req *);
extern int compute_6_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define BB_GETATTR 1
extern  getattr_ret * bb_getattr_6();
extern  getattr_ret * bb_getattr_6_svc();
#define BB_ACCESS 2
extern  access_ret * bb_access_6();
extern  access_ret * bb_access_6_svc();
#define BB_MKDIR 3
extern  mkdir_ret * bb_mkdir_6();
extern  mkdir_ret * bb_mkdir_6_svc();
#define BB_RMDIR 4
extern  rmdir_ret * bb_rmdir_6();
extern  rmdir_ret * bb_rmdir_6_svc();
#define BB_READDIR 5
extern  readdir_ret * bb_readdir_6();
extern  readdir_ret * bb_readdir_6_svc();
#define BB_OPENDIR 6
extern  opendir_ret * bb_opendir_6();
extern  opendir_ret * bb_opendir_6_svc();
#define BB_RELEASEDIR 7
extern  releasedir_ret * bb_releasedir_6();
extern  releasedir_ret * bb_releasedir_6_svc();
#define BB_RENAME 8
extern  rename_ret * bb_rename_6();
extern  rename_ret * bb_rename_6_svc();
#define BB_SYMLINK 9
extern  symlink_ret * bb_symlink_6();
extern  symlink_ret * bb_symlink_6_svc();
#define BB_READLINK 10
extern  readlink_ret * bb_readlink_6();
extern  readlink_ret * bb_readlink_6_svc();
#define BB_MKNOD 11
extern  mknod_ret * bb_mknod_6();
extern  mknod_ret * bb_mknod_6_svc();
#define BB_TRUNCATE 12
extern  truncate_ret * bb_truncate_6();
extern  truncate_ret * bb_truncate_6_svc();
#define BB_UNLINK 13
extern  unlink_ret * bb_unlink_6();
extern  unlink_ret * bb_unlink_6_svc();
#define BB_UTIME 14
extern  utime_ret * bb_utime_6();
extern  utime_ret * bb_utime_6_svc();
#define BB_CHMOD 15
extern  chmod_ret * bb_chmod_6();
extern  chmod_ret * bb_chmod_6_svc();
#define BB_CHOWN 16
extern  chown_ret * bb_chown_6();
extern  chown_ret * bb_chown_6_svc();
#define BB_OPEN 17
extern  open_ret * bb_open_6();
extern  open_ret * bb_open_6_svc();
#define BB_RELEASE 18
extern  release_ret * bb_release_6();
extern  release_ret * bb_release_6_svc();
#define BB_READ 19
extern  read_ret * bb_read_6();
extern  read_ret * bb_read_6_svc();
#define BB_WRITE 20
extern  write_ret * bb_write_6();
extern  write_ret * bb_write_6_svc();
extern int compute_6_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_getattr_arg (XDR *, getattr_arg*);
extern  bool_t xdr_getattr_ret (XDR *, getattr_ret*);
extern  bool_t xdr_access_arg (XDR *, access_arg*);
extern  bool_t xdr_access_ret (XDR *, access_ret*);
extern  bool_t xdr_mkdir_arg (XDR *, mkdir_arg*);
extern  bool_t xdr_mkdir_ret (XDR *, mkdir_ret*);
extern  bool_t xdr_rmdir_arg (XDR *, rmdir_arg*);
extern  bool_t xdr_rmdir_ret (XDR *, rmdir_ret*);
extern  bool_t xdr_readdir_arg (XDR *, readdir_arg*);
extern  bool_t xdr_readdir_ret (XDR *, readdir_ret*);
extern  bool_t xdr_opendir_arg (XDR *, opendir_arg*);
extern  bool_t xdr_opendir_ret (XDR *, opendir_ret*);
extern  bool_t xdr_releasedir_arg (XDR *, releasedir_arg*);
extern  bool_t xdr_releasedir_ret (XDR *, releasedir_ret*);
extern  bool_t xdr_rename_arg (XDR *, rename_arg*);
extern  bool_t xdr_rename_ret (XDR *, rename_ret*);
extern  bool_t xdr_symlink_arg (XDR *, symlink_arg*);
extern  bool_t xdr_symlink_ret (XDR *, symlink_ret*);
extern  bool_t xdr_readlink_arg (XDR *, readlink_arg*);
extern  bool_t xdr_readlink_ret (XDR *, readlink_ret*);
extern  bool_t xdr_mknod_arg (XDR *, mknod_arg*);
extern  bool_t xdr_mknod_ret (XDR *, mknod_ret*);
extern  bool_t xdr_utime_arg (XDR *, utime_arg*);
extern  bool_t xdr_utime_ret (XDR *, utime_ret*);
extern  bool_t xdr_truncate_arg (XDR *, truncate_arg*);
extern  bool_t xdr_truncate_ret (XDR *, truncate_ret*);
extern  bool_t xdr_chmod_arg (XDR *, chmod_arg*);
extern  bool_t xdr_chmod_ret (XDR *, chmod_ret*);
extern  bool_t xdr_chown_arg (XDR *, chown_arg*);
extern  bool_t xdr_chown_ret (XDR *, chown_ret*);
extern  bool_t xdr_unlink_arg (XDR *, unlink_arg*);
extern  bool_t xdr_unlink_ret (XDR *, unlink_ret*);
extern  bool_t xdr_open_arg (XDR *, open_arg*);
extern  bool_t xdr_open_ret (XDR *, open_ret*);
extern  bool_t xdr_release_arg (XDR *, release_arg*);
extern  bool_t xdr_release_ret (XDR *, release_ret*);
extern  bool_t xdr_read_arg (XDR *, read_arg*);
extern  bool_t xdr_read_ret (XDR *, read_ret*);
extern  bool_t xdr_write_arg (XDR *, write_arg*);
extern  bool_t xdr_write_ret (XDR *, write_ret*);

#else /* K&R C */
extern bool_t xdr_getattr_arg ();
extern bool_t xdr_getattr_ret ();
extern bool_t xdr_access_arg ();
extern bool_t xdr_access_ret ();
extern bool_t xdr_mkdir_arg ();
extern bool_t xdr_mkdir_ret ();
extern bool_t xdr_rmdir_arg ();
extern bool_t xdr_rmdir_ret ();
extern bool_t xdr_readdir_arg ();
extern bool_t xdr_readdir_ret ();
extern bool_t xdr_opendir_arg ();
extern bool_t xdr_opendir_ret ();
extern bool_t xdr_releasedir_arg ();
extern bool_t xdr_releasedir_ret ();
extern bool_t xdr_rename_arg ();
extern bool_t xdr_rename_ret ();
extern bool_t xdr_symlink_arg ();
extern bool_t xdr_symlink_ret ();
extern bool_t xdr_readlink_arg ();
extern bool_t xdr_readlink_ret ();
extern bool_t xdr_mknod_arg ();
extern bool_t xdr_mknod_ret ();
extern bool_t xdr_utime_arg ();
extern bool_t xdr_utime_ret ();
extern bool_t xdr_truncate_arg ();
extern bool_t xdr_truncate_ret ();
extern bool_t xdr_chmod_arg ();
extern bool_t xdr_chmod_ret ();
extern bool_t xdr_chown_arg ();
extern bool_t xdr_chown_ret ();
extern bool_t xdr_unlink_arg ();
extern bool_t xdr_unlink_ret ();
extern bool_t xdr_open_arg ();
extern bool_t xdr_open_ret ();
extern bool_t xdr_release_arg ();
extern bool_t xdr_release_ret ();
extern bool_t xdr_read_arg ();
extern bool_t xdr_read_ret ();
extern bool_t xdr_write_arg ();
extern bool_t xdr_write_ret ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_FUSE_RPC_H_RPCGEN */
